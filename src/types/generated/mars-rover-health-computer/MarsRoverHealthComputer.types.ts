// @ts-nocheck
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

type Decimal = string
type HlsAssetTypeForAddr =
  | {
      coin: {
        denom: string
      }
    }
  | {
      vault: {
        addr: Addr
      }
    }
type Addr = string
type Uint128 = string
type AccountKind =
  | ('default' | 'high_levered_strategy')
  | {
      fund_manager: {
        vault_addr: string
      }
    }
type Int128 = string
type VaultPositionAmount =
  | {
      unlocked: VaultAmount
    }
  | {
      locking: LockingVaultAmount
    }
type VaultAmount = string
type VaultAmount1 = string
type UnlockingPositions = VaultUnlockingPosition[]
interface HealthComputer {
  asset_params: {
    [k: string]: AssetParamsBaseForAddr
  }
  kind: AccountKind
  oracle_prices: {
    [k: string]: Decimal
  }
  perps_data: PerpsData
  positions: Positions
  vaults_data: VaultsData
}
interface AssetParamsBaseForAddr {
  close_factor: Decimal
  credit_manager: CmSettingsForAddr
  denom: string
  deposit_cap: Uint128
  liquidation_bonus: LiquidationBonus
  liquidation_threshold: Decimal
  max_loan_to_value: Decimal
  protocol_liquidation_fee: Decimal
  red_bank: RedBankSettings
}
interface CmSettingsForAddr {
  hls?: HlsParamsBaseForAddr | null
  whitelisted: boolean
  withdraw_enabled: boolean
}
interface HlsParamsBaseForAddr {
  correlations: HlsAssetTypeForAddr[]
  liquidation_threshold: Decimal
  max_loan_to_value: Decimal
}
interface LiquidationBonus {
  max_lb: Decimal
  min_lb: Decimal
  slope: Decimal
  starting_lb: Decimal
}
interface RedBankSettings {
  borrow_enabled: boolean
  deposit_enabled: boolean
  withdraw_enabled: boolean
}
interface PerpsData {
  params: {
    [k: string]: PerpParams
  }
}
export interface PerpParams {
  closing_fee_rate: Decimal
  denom: string
  enabled: boolean
  liquidation_threshold: Decimal
  max_funding_velocity: Decimal
  max_loan_to_value: Decimal
  max_long_oi_value: Uint128
  max_net_oi_value: Uint128
  max_position_value?: Uint128 | null
  max_short_oi_value: Uint128
  min_position_value: Uint128
  opening_fee_rate: Decimal
  skew_scale: Uint128
}
interface Positions {
  account_id: string
  account_kind: AccountKind
  debts: DebtAmount[]
  deposits: Coin[]
  lends: Coin[]
  perps: PerpPosition[]
  staked_astro_lps: Coin[]
  vaults: VaultPosition[]
}
interface DebtAmount {
  amount: Uint128
  denom: string
  shares: Uint128
}
interface Coin {
  amount: Uint128
  denom: string
  [k: string]: unknown
}
interface PerpPosition {
  base_denom: string
  current_exec_price: Decimal
  current_price: Decimal
  denom: string
  entry_exec_price: Decimal
  entry_price: Decimal
  realized_pnl: PnlAmounts
  size: Int128
  unrealized_pnl: PnlAmounts
}
interface PnlAmounts {
  accrued_funding: Int128
  closing_fee: Int128
  opening_fee: Int128
  pnl: Int128
  price_pnl: Int128
}
interface VaultPosition {
  amount: VaultPositionAmount
  vault: VaultBaseForAddr
}
interface LockingVaultAmount {
  locked: VaultAmount1
  unlocking: UnlockingPositions
}
interface VaultUnlockingPosition {
  coin: Coin
  id: number
}
interface VaultBaseForAddr {
  address: Addr
}
interface VaultsData {
  vault_configs: {
    [k: string]: VaultConfigBaseForAddr
  }
  vault_values: {
    [k: string]: VaultPositionValue
  }
}
interface VaultConfigBaseForAddr {
  addr: Addr
  deposit_cap: Coin
  hls?: HlsParamsBaseForAddr | null
  liquidation_threshold: Decimal
  max_loan_to_value: Decimal
  whitelisted: boolean
}
interface VaultPositionValue {
  base_coin: CoinValue
  vault_coin: CoinValue
}
interface CoinValue {
  amount: Uint128
  denom: string
  value: Uint128
}
